###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      12/Aug/2013  09:53:47 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\STM32F05x\STM32F0-DISCOVERY\Libraries\STM32F0xx_StdPe #
#                    riph_Driver\src\stm32f0xx_misc.c                         #
#    Command line =  E:\STM32F05x\STM32F0-DISCOVERY\Libraries\STM32F0xx_StdPe #
#                    riph_Driver\src\stm32f0xx_misc.c -D VECT_TAB_FLASH -lcN  #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\List\ -o    #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\Obj\        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0 -e --fpu=None            #
#                    --dlib_config D:\IAR\arm\INC\c\DLib_Config_Normal.h      #
#                    --preinclude stm32f0xx_conf.h -I                         #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\ -I               #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\src\EvalTest\ -I  #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\..\Libraries\STM3 #
#                    2F0xx_StdPeriph_Driver\inc\ -I                           #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F0xx\Include\ -I                        #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\..\Libraries\CMSI #
#                    S\Include\ -Ol --use_c++_inline -I                       #
#                    D:\IAR\arm\CMSIS\Include\                                #
#    List file    =  E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\List\stm32f #
#                    0xx_misc.lst                                             #
#    Object file  =  E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\Obj\stm32f0 #
#                    xx_misc.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

E:\STM32F05x\STM32F0-DISCOVERY\Libraries\STM32F0xx_StdPeriph_Driver\src\stm32f0xx_misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f0xx_misc.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    20-April-2012
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     13            *
     14            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     15            * You may not use this file except in compliance with the License.
     16            * You may obtain a copy of the License at:
     17            *
     18            *        http://www.st.com/software_license_agreement_liberty_v2
     19            *
     20            * Unless required by applicable law or agreed to in writing, software 
     21            * distributed under the License is distributed on an "AS IS" BASIS, 
     22            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     23            * See the License for the specific language governing permissions and
     24            * limitations under the License.
     25            *
     26            ******************************************************************************
     27            */
     28          
     29          /* Includes ------------------------------------------------------------------*/
     30          #include "stm32f0xx_misc.h"
     31          
     32          /** @addtogroup STM32F0xx_StdPeriph_Driver
     33            * @{
     34            */
     35          
     36          /** @defgroup MISC 
     37            * @brief MISC driver modules
     38            * @{
     39            */
     40          
     41          /* Private typedef -----------------------------------------------------------*/
     42          /* Private define ------------------------------------------------------------*/
     43          /* Private macro -------------------------------------------------------------*/
     44          /* Private variables ---------------------------------------------------------*/
     45          /* Private function prototypes -----------------------------------------------*/
     46          /* Private functions ---------------------------------------------------------*/
     47          
     48          /** @defgroup MISC_Private_Functions
     49            * @{
     50            */
     51          /**
     52            *
     53          @verbatim
     54           *******************************************************************************
     55                             ##### Interrupts configuration functions #####
     56           *******************************************************************************
     57              [..] This section provide functions allowing to configure the NVIC interrupts
     58                  (IRQ). The Cortex-M0 exceptions are managed by CMSIS functions.
     59                   (#) Enable and Configure the priority of the selected IRQ Channels. 
     60                       The priority can be 0..3. 
     61          
     62                  -@- Lower priority values gives higher priority.
     63                  -@- Priority Order:
     64                      (#@) Lowest priority.
     65                      (#@) Lowest hardware priority (IRQn position).  
     66            
     67          @endverbatim
     68          */
     69          
     70          /**
     71            * @brief  Initializes the NVIC peripheral according to the specified
     72            *         parameters in the NVIC_InitStruct.
     73            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
     74            *         function should be called before.    
     75            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
     76            *         the configuration information for the specified NVIC peripheral.
     77            * @retval None
     78            */
     79          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
     80          {
     81            uint32_t tmppriority = 0x00;
     82            
     83            /* Check the parameters */
     84            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
     85            assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
     86              
     87            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     88            {
     89              /* Compute the Corresponding IRQ Priority --------------------------------*/    
     90              tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
     91              tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
     92              tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
     93              
     94              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
     95              
     96              /* Enable the Selected IRQ Channels --------------------------------------*/
     97              NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
     98            }
     99            else
    100            {
    101              /* Disable the Selected IRQ Channels -------------------------------------*/
    102              NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    103            }
    104          }
    105          
    106          /**
    107            * @brief  Selects the condition for the system to enter low power mode.
    108            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    109            *          This parameter can be one of the following values:
    110            *            @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    111            *            @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    112            *            @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    113            * @param  NewState: new state of LP condition. 
    114            *          This parameter can be: ENABLE or DISABLE.
    115            * @retval None
    116            */
    117          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    118          {
    119            /* Check the parameters */
    120            assert_param(IS_NVIC_LP(LowPowerMode));
    121            
    122            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    123            
    124            if (NewState != DISABLE)
    125            {
    126              SCB->SCR |= LowPowerMode;
    127            }
    128            else
    129            {
    130              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    131            }
    132          }
    133          
    134          /**
    135            * @brief  Configures the SysTick clock source.
    136            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    137            *          This parameter can be one of the following values:
    138            *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    139            *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    140            * @retval None
    141            */
    142          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    143          {
    144            /* Check the parameters */
    145            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    146            
    147            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    148            {
    149              SysTick->CTRL |= SysTick_CLKSource_HCLK;
    150            }
    151            else
    152            {
    153              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    154            }
    155          }
    156          
    157          /**
    158            * @}
    159            */
    160          
    161          /**
    162            * @}
    163            */
    164          
    165          /**
    166            * @}
    167            */
    168          
    169          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   NVIC_Init
       4   NVIC_SystemLPConfig
       4   SysTick_CLKSourceConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
     104  NVIC_Init
      36  NVIC_SystemLPConfig
      34  SysTick_CLKSourceConfig

 
 194 bytes in section .text
 
 194 bytes of CODE memory

Errors: none
Warnings: none
