###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      12/Aug/2013  09:53:47 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\STM32F05x\STM32F0-DISCOVERY\Libraries\STM32F0xx_StdPe #
#                    riph_Driver\src\stm32f0xx_exti.c                         #
#    Command line =  E:\STM32F05x\STM32F0-DISCOVERY\Libraries\STM32F0xx_StdPe #
#                    riph_Driver\src\stm32f0xx_exti.c -D VECT_TAB_FLASH -lcN  #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\List\ -o    #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\Obj\        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0 -e --fpu=None            #
#                    --dlib_config D:\IAR\arm\INC\c\DLib_Config_Normal.h      #
#                    --preinclude stm32f0xx_conf.h -I                         #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\ -I               #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\src\EvalTest\ -I  #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\..\Libraries\STM3 #
#                    2F0xx_StdPeriph_Driver\inc\ -I                           #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F0xx\Include\ -I                        #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\..\Libraries\CMSI #
#                    S\Include\ -Ol --use_c++_inline -I                       #
#                    D:\IAR\arm\CMSIS\Include\                                #
#    List file    =  E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\List\stm32f #
#                    0xx_exti.lst                                             #
#    Object file  =  E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\Obj\stm32f0 #
#                    xx_exti.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

E:\STM32F05x\STM32F0-DISCOVERY\Libraries\STM32F0xx_StdPeriph_Driver\src\stm32f0xx_exti.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f0xx_exti.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    20-April-2012
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the EXTI peripheral:
      9            *           + Initialization and Configuration
     10            *           + Interrupts and flags management
     11            *
     12            *  @verbatim
     13            ==============================================================================
     14                                      ##### EXTI features ##### 
     15            ==============================================================================
     16              [..] External interrupt/event lines are mapped as following:
     17                   (#) All available GPIO pins are connected to the 16 external 
     18                       interrupt/event lines from EXTI0 to EXTI15.
     19                   (#) EXTI line 16 is connected to the PVD output.
     20                   (#) EXTI line 17 is connected to the RTC Alarm event.
     21                   (#) EXTI line 19 is connected to the RTC Tamper and TimeStamp events
     22                   (#) EXTI line 21 is connected to the Comparator 1 wakeup event 
     23                   (#) EXTI line 22 is connected to the Comparator 2 wakeup event
     24                   (#) EXTI line 23 is connected to the I2C1 wakeup event
     25                   (#) EXTI line 25 is connected to the USART1 wakeup event
     26                   (#) EXTI line 27 is connected to the CEC wakeup event
     27          
     28                                 ##### How to use this driver ##### 
     29            ==============================================================================
     30              [..] In order to use an I/O pin as an external interrupt source, follow
     31                   steps below:
     32              (#) Configure the I/O in input mode using GPIO_Init()
     33              (#) Select the input source pin for the EXTI line using 
     34                  SYSCFG_EXTILineConfig().
     35              (#) Select the mode(interrupt, event) and configure the trigger selection 
     36                 (Rising, falling or both) using EXTI_Init(). For the internal interrupt,
     37                 the trigger selection is not needed( the active edge is always the rising one).
     38              (#) Configure NVIC IRQ channel mapped to the EXTI line using NVIC_Init().
     39              (#) Optionally, you can generate a software interrupt using the function EXTI_GenerateSWInterrupt().
     40              [..]
     41              (@) SYSCFG APB clock must be enabled to get write access to SYSCFG_EXTICRx
     42                registers using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     43              @endverbatim
     44            *
     45            ******************************************************************************
     46            * @attention
     47            *
     48            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     49            *
     50            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     51            * You may not use this file except in compliance with the License.
     52            * You may obtain a copy of the License at:
     53            *
     54            *        http://www.st.com/software_license_agreement_liberty_v2
     55            *
     56            * Unless required by applicable law or agreed to in writing, software 
     57            * distributed under the License is distributed on an "AS IS" BASIS, 
     58            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     59            * See the License for the specific language governing permissions and
     60            * limitations under the License.
     61            *
     62            ******************************************************************************
     63            */
     64          
     65          /* Includes ------------------------------------------------------------------*/
     66          #include "stm32f0xx_exti.h"
     67          
     68          /** @addtogroup STM32F0xx_StdPeriph_Driver
     69            * @{
     70            */
     71          
     72          /** @defgroup EXTI 
     73            * @brief EXTI driver modules
     74            * @{
     75            */
     76          
     77          /* Private typedef -----------------------------------------------------------*/
     78          /* Private define ------------------------------------------------------------*/
     79          #define EXTI_LINENONE     ((uint32_t)0x00000)        /* No interrupt selected */
     80          
     81          /* Private macro -------------------------------------------------------------*/
     82          /* Private variables ---------------------------------------------------------*/
     83          /* Private function prototypes -----------------------------------------------*/
     84          /* Private functions ---------------------------------------------------------*/
     85          
     86          /** @defgroup EXTI_Private_Functions
     87            * @{
     88            */
     89          
     90          /** @defgroup EXTI_Group1 Initialization and Configuration functions
     91           *  @brief   Initialization and Configuration functions 
     92           *
     93          @verbatim   
     94            ==============================================================================
     95                      ##### Initialization and Configuration functions #####
     96            ==============================================================================
     97          
     98          @endverbatim
     99            * @{
    100            */
    101          
    102          /**
    103            * @brief  Deinitializes the EXTI peripheral registers to their default reset 
    104            *         values.
    105            * @param  None
    106            * @retval None
    107            */
    108          void EXTI_DeInit(void)
    109          {
    110            EXTI->IMR = 0x0F940000;
    111            EXTI->EMR = 0x00000000;
    112            EXTI->RTSR = 0x00000000;
    113            EXTI->FTSR = 0x00000000;
    114            EXTI->PR = 0x006BFFFF;
    115          }
    116          
    117          /**
    118            * @brief  Initializes the EXTI peripheral according to the specified
    119            *         parameters in the EXTI_InitStruct.
    120            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure that 
    121            *         contains the configuration information for the EXTI peripheral.
    122            * @retval None
    123            */
    124          void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
    125          {
    126            uint32_t tmp = 0;
    127          
    128            /* Check the parameters */
    129            assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
    130            assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
    131            assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
    132            assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
    133          
    134            tmp = (uint32_t)EXTI_BASE;
    135          
    136            if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    137            {
    138              /* Clear EXTI line configuration */
    139              EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    140              EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    141          
    142              tmp += EXTI_InitStruct->EXTI_Mode;
    143          
    144              *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    145          
    146              /* Clear Rising Falling edge configuration */
    147              EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    148              EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    149          
    150              /* Select the trigger for the selected interrupts */
    151              if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    152              {
    153                /* Rising Falling edge */
    154                EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    155                EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    156              }
    157              else
    158              {
    159                tmp = (uint32_t)EXTI_BASE;
    160                tmp += EXTI_InitStruct->EXTI_Trigger;
    161          
    162                *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    163              }
    164            }
    165            else
    166            {
    167              tmp += EXTI_InitStruct->EXTI_Mode;
    168          
    169              /* Disable the selected external lines */
    170              *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    171            }
    172          }
    173          
    174          /**
    175            * @brief  Fills each EXTI_InitStruct member with its reset value.
    176            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
    177            *         be initialized.
    178            * @retval None
    179            */
    180          void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
    181          {
    182            EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    183            EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    184            EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    185            EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    186          }
    187          
    188          /**
    189            * @brief  Generates a Software interrupt on selected EXTI line.
    190            * @param  EXTI_Line: specifies the EXTI line on which the software interrupt
    191            *         will be generated.
    192            *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
    193            * @retval None
    194            */
    195          void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
    196          {
    197            /* Check the parameters */
    198            assert_param(IS_EXTI_LINE(EXTI_Line));
    199          
    200            EXTI->SWIER |= EXTI_Line;
    201          }
    202          
    203          /**
    204            * @}
    205            */
    206          
    207          /** @defgroup EXTI_Group2 Interrupts and flags management functions
    208           *  @brief    Interrupts and flags management functions 
    209           *
    210          @verbatim   
    211            ==============================================================================
    212                       ##### Interrupts and flags management functions #####
    213            ==============================================================================
    214            
    215          @endverbatim
    216            * @{
    217            */
    218          
    219          /**
    220            * @brief  Checks whether the specified EXTI line flag is set or not.
    221            * @param  EXTI_Line: specifies the EXTI line flag to check.
    222            *          This parameter can be EXTI_Linex where x can be (0..27).
    223            * @retval The new state of EXTI_Line (SET or RESET).
    224            */
    225          FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
    226          {
    227             FlagStatus bitstatus = RESET;
    228            /* Check the parameters */
    229            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
    230          
    231            if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    232            {
    233              bitstatus = SET;
    234            }
    235            else
    236            {
    237              bitstatus = RESET;
    238            }
    239            return bitstatus;
    240          }
    241          
    242          /**
    243            * @brief  Clears the EXTI's line pending flags.
    244            * @param  EXTI_Line: specifies the EXTI lines flags to clear.
    245            *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
    246            * @retval None
    247            */
    248          void EXTI_ClearFlag(uint32_t EXTI_Line)
    249          {
    250            /* Check the parameters */
    251            assert_param(IS_EXTI_LINE(EXTI_Line));
    252          
    253            EXTI->PR = EXTI_Line;
    254          }
    255          
    256          /**
    257            * @brief  Checks whether the specified EXTI line is asserted or not.
    258            * @param  EXTI_Line: specifies the EXTI line to check.
    259            *          This parameter can be EXTI_Linex where x can be (0..27).
    260            * @retval The new state of EXTI_Line (SET or RESET).
    261            */
    262          ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
    263          {
    264            ITStatus bitstatus = RESET;
    265            uint32_t enablestatus = 0;
    266            /* Check the parameters */
    267            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
    268          
    269            enablestatus =  EXTI->IMR & EXTI_Line;
    270            if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    271            {
    272              bitstatus = SET;
    273            }
    274            else
    275            {
    276              bitstatus = RESET;
    277            }
    278            return bitstatus;
    279            
    280          }
    281          
    282          /**
    283            * @brief  Clears the EXTI's line pending bits.
    284            * @param  EXTI_Line: specifies the EXTI lines to clear.
    285            *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
    286            * @retval None
    287            */
    288          void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
    289          {
    290            /* Check the parameters */
    291            assert_param(IS_EXTI_LINE(EXTI_Line));
    292          
    293            EXTI->PR = EXTI_Line;
    294          }
    295          
    296          /**
    297            * @}
    298            */
    299          
    300          /**
    301            * @}
    302            */
    303          
    304          /**
    305            * @}
    306            */
    307          
    308          /**
    309            * @}
    310            */
    311          
    312          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   EXTI_ClearFlag
       0   EXTI_ClearITPendingBit
       0   EXTI_DeInit
       0   EXTI_GenerateSWInterrupt
       4   EXTI_GetFlagStatus
       4   EXTI_GetITStatus
       4   EXTI_Init
       0   EXTI_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       6  EXTI_ClearFlag
       6  EXTI_ClearITPendingBit
      32  EXTI_DeInit
      12  EXTI_GenerateSWInterrupt
      26  EXTI_GetFlagStatus
      40  EXTI_GetITStatus
     136  EXTI_Init
      18  EXTI_StructInit

 
 308 bytes in section .text
 
 308 bytes of CODE memory

Errors: none
Warnings: none
