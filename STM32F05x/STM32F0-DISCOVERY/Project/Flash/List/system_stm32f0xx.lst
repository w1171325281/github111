###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      12/Aug/2013  09:53:49 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\STM32F05x\STM32F0-DISCOVERY\Project\src\EvalTest\syst #
#                    em_stm32f0xx.c                                           #
#    Command line =  E:\STM32F05x\STM32F0-DISCOVERY\Project\src\EvalTest\syst #
#                    em_stm32f0xx.c -D VECT_TAB_FLASH -lcN                    #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\List\ -o    #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\Obj\        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0 -e --fpu=None            #
#                    --dlib_config D:\IAR\arm\INC\c\DLib_Config_Normal.h      #
#                    --preinclude stm32f0xx_conf.h -I                         #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\ -I               #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\src\EvalTest\ -I  #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\..\Libraries\STM3 #
#                    2F0xx_StdPeriph_Driver\inc\ -I                           #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F0xx\Include\ -I                        #
#                    E:\STM32F05x\STM32F0-DISCOVERY\Project\..\Libraries\CMSI #
#                    S\Include\ -Ol --use_c++_inline -I                       #
#                    D:\IAR\arm\CMSIS\Include\                                #
#    List file    =  E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\List\system #
#                    _stm32f0xx.lst                                           #
#    Object file  =  E:\STM32F05x\STM32F0-DISCOVERY\Project\Flash\Obj\system_ #
#                    stm32f0xx.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\STM32F05x\STM32F0-DISCOVERY\Project\src\EvalTest\system_stm32f0xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f0xx.c
      4            * @author  MCD Application Team
      5            * @version V0.1.0
      6            * @date    11-November-2011
      7            * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F0xx devices,
      9            *          and is generated by the clock configuration tool  
     10            *           STM32F0xx_Clock_Configuration_VX.Y.Z.xls
     11            *             
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool. 
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32f0xx.s" file.
     20            *                        
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *                                     
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.   
     28            *      
     29            * 2. After each device reset the MSI (2.1 MHz Range) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
     31            *    configure the system clock before to branch to main program.    
     32            *    
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and MSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.       
     36            * 
     37            * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
     38            *    in "stm32f0xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            * 
     42            * 5. This file configures the system clock as follows:  
     43            *=============================================================================
     44            *                         System Clock Configuration
     45            *=============================================================================
     46            *        System Clock source          | PLL(HSE)
     47            *----------------------------------------------------------------------------- 
     48            *        SYSCLK                       | 48000000 Hz
     49            *----------------------------------------------------------------------------- 
     50            *        HCLK                         | 48000000 Hz
     51            *----------------------------------------------------------------------------- 
     52            *        AHB Prescaler                | 1
     53            *----------------------------------------------------------------------------- 
     54            *        APB1 Prescaler               | 1
     55            *----------------------------------------------------------------------------- 
     56            *        APB2 Prescaler               | 1
     57            *----------------------------------------------------------------------------- 
     58            *        HSE Frequency                | 8000000 Hz
     59            *----------------------------------------------------------------------------- 
     60            *        PLL MUL                      | 6
     61            *----------------------------------------------------------------------------- 
     62            *        VDD                          | 3.3 V
     63            *----------------------------------------------------------------------------- 
     64            *        Flash Latency                | 1 WS
     65            *----------------------------------------------------------------------------- 
     66            *=============================================================================
     67            ****************************************************************************** 
     68            * @attention
     69            *
     70            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     71            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     72            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     73            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     74            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     75            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     76            *
     77            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     78            ******************************************************************************  
     79            */
     80          
     81          /** @addtogroup CMSIS
     82            * @{
     83            */
     84          
     85          /** @addtogroup stm32f0xx_system
     86            * @{
     87            */  
     88            
     89          /** @addtogroup STM32F0xx_System_Private_Includes
     90            * @{
     91            */
     92          
     93          /**
     94            * @}
     95            */
     96          
     97          /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
     98            * @{
     99            */
    100          
    101          /**
    102            * @}
    103            */
    104          
    105          /** @addtogroup STM32F0xx_System_Private_Defines
    106            * @{
    107            */
    108          /**
    109            * @}
    110            */
    111          
    112          /** @addtogroup STM32F0xx_System_Private_Macros
    113            * @{
    114            */
    115          
    116          /**
    117            * @}
    118            */
    119          
    120          /** @addtogroup STM32F0xx_System_Private_Variables
    121            * @{
    122            */
    123          uint32_t SystemCoreClock    = 48000000;
    124          __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    125          
    126          /**
    127            * @}
    128            */
    129          
    130          /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
    131            * @{
    132            */
    133          
    134          static void SetSysClock(void);
    135          
    136          /**
    137            * @}
    138            */
    139          
    140          /** @addtogroup STM32F0xx_System_Private_Functions
    141            * @{
    142            */
    143          /**
    144            * @brief  Setup the microcontroller system.
    145            *         Initialize the Embedded Flash Interface, the PLL and update the 
    146            *         SystemCoreClock variable.
    147            * @param  None
    148            * @retval None
    149            */
    150          void SystemInit (void)
    151          {    
    152          
    153            /* Set HSION bit */
    154            RCC->CR |= (uint32_t)0x00000001;
    155          
    156            /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
    157            RCC->CFGR &= (uint32_t)0xF8FFB80C;
    158            
    159            /* Reset HSEON, CSSON and PLLON bits */
    160            RCC->CR &= (uint32_t)0xFEF6FFFF;
    161          
    162            /* Reset HSEBYP bit */
    163            RCC->CR &= (uint32_t)0xFFFBFFFF;
    164          
    165            /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
    166            RCC->CFGR &= (uint32_t)0xFFC0FFFF;
    167          
    168            /* Reset PREDIV1[3:0] bits */
    169            RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
    170          
    171            /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
    172            RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
    173            
    174            /* Reset HSI14 bit */
    175            RCC->CR2 &= (uint32_t)0xFFFFFFFE;
    176          
    177            /* Disable all interrupts */
    178            RCC->CIR = 0x00000000;
    179           
    180            
    181          /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
    182            SetSysClock();
    183          }
    184          
    185          /**
    186            * @brief  Update SystemCoreClock according to Clock Register Values
    187            * @note   - The system frequency computed by this function is not the real 
    188            *           frequency in the chip. It is calculated based on the predefined 
    189            *           constant and the selected clock source:
    190            *             
    191            *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI 
    192            *             value as defined by the MSI range.
    193            *                                   
    194            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    195            *                                              
    196            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    197            *                          
    198            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
    199            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    200            *         
    201            *         (*) HSI_VALUE is a constant defined in stm32f0xx.h file (default value
    202            *             16 MHz) but the real value may vary depending on the variations
    203            *             in voltage and temperature.   
    204            *    
    205            *         (**) HSE_VALUE is a constant defined in stm32f0xx.h file (default value
    206            *              8 MHz), user has to ensure that HSE_VALUE is same as the real
    207            *              frequency of the crystal used. Otherwise, this function may
    208            *              have wrong result.
    209            *                
    210            *         - The result of this function could be not correct when using fractional
    211            *           value for HSE crystal.  
    212            * @param  None
    213            * @retval None
    214            */
    215          void SystemCoreClockUpdate (void)
    216          {
    217            uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
    218          
    219            /* Get SYSCLK source -------------------------------------------------------*/
    220            tmp = RCC->CFGR & RCC_CFGR_SWS;
    221            
    222            switch (tmp)
    223            {
    224              case 0x00:  /* HSI used as system clock */
    225                SystemCoreClock = HSI_VALUE;
    226                break;
    227              case 0x04:  /* HSE used as system clock */
    228                SystemCoreClock = HSE_VALUE;
    229                break;
    230              case 0x08:  /* PLL used as system clock */
    231                /* Get PLL clock source and multiplication factor ----------------------*/
    232                pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
    233                pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
    234                pllmull = ( pllmull >> 18) + 2;
    235                
    236                if (pllsource == 0x00)
    237                {
    238                  /* HSI oscillator clock divided by 2 selected as PLL clock entry */
    239                  SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
    240                }
    241                else
    242                {
    243                  prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
    244                  /* HSE oscillator clock selected as PREDIV1 clock entry */
    245                  SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
    246                }      
    247                break;
    248              default: /* HSI used as system clock */
    249                SystemCoreClock = HSI_VALUE;
    250                break;
    251            }
    252            /* Compute HCLK clock frequency ----------------*/
    253            /* Get HCLK prescaler */
    254            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    255            /* HCLK clock frequency */
    256            SystemCoreClock >>= tmp;  
    257          }
    258          
    259          /**
    260            * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash 
    261            *         settings.
    262            * @note   This function should be called only once the RCC clock configuration  
    263            *         is reset to the default reset state (done in SystemInit() function).             
    264            * @param  None
    265            * @retval None
    266            */
    267          static void SetSysClock(void)
    268          {
    269            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    270            
    271            /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/    
    272            /* Enable HSE */    
    273            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    274           
    275            /* Wait till HSE is ready and if Time out is reached exit */
    276            do
    277            {
    278              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    279              StartUpCounter++;  
    280            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    281          
    282            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    283            {
    284              HSEStatus = (uint32_t)0x01;
    285            }
    286            else
    287            {
    288              HSEStatus = (uint32_t)0x00;
    289            }  
    290          
    291            if (HSEStatus == (uint32_t)0x01)
    292            {
    293              /* Enable Prefetch Buffer */
    294              FLASH->ACR |= FLASH_ACR_PRFTBE;
    295              FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY;
    296           
    297              /* HCLK = SYSCLK */
    298              RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
    299                
    300              /* PCLK = HCLK */
    301              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
    302          
    303              /*  PLL configuration:  = HSE *  6 = 48 MHz */
    304              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    305              RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
    306                      
    307              /* Enable PLL */
    308              RCC->CR |= RCC_CR_PLLON;
    309          
    310              /* Wait till PLL is ready */
    311              while((RCC->CR & RCC_CR_PLLRDY) == 0)
    312              {
    313              }
    314          
    315              /* Select PLL as system clock source */
    316              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    317              RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
    318          
    319              /* Wait till PLL is used as system clock source */
    320              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
    321              {
    322              }
    323            }
    324            else
    325            { /* If HSE fails to start-up, the application will have wrong clock 
    326                   configuration. User can add here some code to deal with this error */
    327            }  
    328          }
    329          
    330          /**
    331            * @}
    332            */
    333          
    334          /**
    335            * @}
    336            */
    337          
    338          /**
    339            * @}
    340            */
    341          
    342          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   SetSysClock
      12   SystemCoreClockUpdate
        12   -> __aeabi_uidiv
       8   SystemInit
         8   -> SetSysClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  AHBPrescTable
     208  SetSysClock
       4  SystemCoreClock
     144  SystemCoreClockUpdate
     110  SystemInit

 
  20 bytes in section .data
 526 bytes in section .text
 
 526 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
